---
// pages/posts/[...slug].astro
import {getCollection, render} from "astro:content";
import Layout from "@/layouts/main.astro";
import FolderStructure from "@/components/posts/folder-structure.astro";
import Separator from "@/components/posts/separator.astro"
import {basics} from "@cv";

const {nickname} = basics;

export async function getStaticPaths() {
  const posts = await getCollection("post");

  return [
    // index 페이지용 경로
    {params: {slug: undefined}},
    // 각 포스트용 경로들
    ...posts.map((post) => ({
      params: {slug: post.id},
      props: {post},
    })),
  ];
}

const {post} = Astro.props;
const {slug} = Astro.params;
const posts = await getCollection("post");

// 폴더 구조 변환 함수
function generateFolderStructure(posts) {
  const structure = [];

  posts.forEach((post) => {
    const {id} = post;
    const parts = id.split("/");
    let currentLevel = structure;

    parts.forEach((part, index) => {
      let existing = currentLevel.find((item) => item.name === part);

      if (!existing) {
        existing = {
          post,
          name: part,
          path: index === parts.length - 1 ? `/posts/${id}` : null,
          children: [],
        };
        currentLevel.push(existing);
      }

      if (index < parts.length - 1) {
        currentLevel = existing.children;
      }
    });
  });

  return structure;
}

const structuredData = generateFolderStructure(posts.filter((post) => post.id !== "index"));
const indexPost = posts.find((post) => post.id === "index");

const currentPost = slug ? post : indexPost;

let Content = undefined;
if (currentPost) {
  const {Content: PostContent} = await render(currentPost);
  Content = PostContent;
}
---

<Layout title=`${nickname} - Posts`>
  <div
    class="flex flex-col lg:flex-row mx-auto sm:min-h-[calc(100vh-169px)] min-h-[calc(100vh-125px)]
            border-t border-neutral-200 dark:border-neutral-800
            bg-white
            dark:bg-neutral-950
    "
  >
    <!-- 사이드바 -->
    <aside
      class="hidden lg:flex flex-col basis-full lg:basis-72 grow-0 shrink-0"
    >
      <!--<svg-->
      <!--  class="w-8 h-8 dark:text-neutral-200"-->
      <!--  fill="none"-->
      <!--  stroke-linecap="round"-->
      <!--  stroke-linejoin="round"-->
      <!--  stroke-width="2"-->
      <!--  viewBox="0 0 24 24"-->
      <!--  stroke="currentColor"-->
      <!--&gt;-->
      <!--  <path d="M4 8h16M4 16h16"></path>-->
      <!--</svg>-->
      <nav
        class="p-2 lg:pb-20 overflow-y-auto"
      >
        <FolderStructure items={structuredData} currentPost={post} indexPost={indexPost}/>
      </nav>
    </aside>

    <Separator/>

    <!-- 메인 콘텐츠 -->
    <main class="flex-1 flex flex-col ">
      {
        currentPost && (
          <article class="prose dark:prose-invert max-w-none">
            {Content &&
              <Content/>}
          </article>
        )
      }
    </main>

    <Separator/>

  </div>
</Layout>
