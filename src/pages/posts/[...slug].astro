---
import {getCollection, render} from "astro:content";
import Layout from "@/layouts/main.astro";
import FolderStructure from "@/components/posts/folder-structure.astro";
import Separator from "@/components/posts/separator.astro"
import TableOfContents from "@/components/posts/toc.astro";
import {basics} from "@cv";
import type {Post, Content} from "@/types";

const {nickname} = basics;

const posts = (await getCollection("post"))
  .filter(post => import.meta.env.DEV || post.data.published === true)

export async function getStaticPaths() {
  const posts = (await getCollection("post"))
    .filter(post => import.meta.env.DEV || post.data.published === true);

  return [
    // index 페이지용 경로
    {params: {slug: undefined}},
    // 각 포스트용 경로들
    ...posts.map((post) => ({
      params: {slug: post.id},
      props: {post},
    })),
  ];
}

const {post} = Astro.props;
const {slug} = Astro.params;

// 폴더 구조 변환 함수
function generateFolderStructure(posts) {
  const structure = [];

  posts.forEach((post) => {
    const {id} = post;
    const parts = id.split("/");
    let currentLevel = structure;

    parts.forEach((part, index) => {
      let existing = currentLevel.find((item) => item.name === part);

      if (!existing) {
        existing = {
          post,
          name: part,
          path: index === parts.length - 1 ? `/posts/${id}` : null,
          children: [],
        };
        currentLevel.push(existing);
      }

      if (index < parts.length - 1) {
        currentLevel = existing.children;
      }
    });
  });

  return structure;
}

const structuredData = generateFolderStructure(posts.filter((post) => post.id !== "index"));
const indexPost = posts.find((post) => post.id === "index");

const currentPost = slug ? post : indexPost;

let Content = undefined;
let headings = [];
if (currentPost) {
  const rendered = await render(currentPost);
  Content = rendered.Content;
  headings = rendered.headings;
}

function toPascalCase(str: string) {
  return str.toLowerCase()
    .replace(/^[a-z]/, firstChar => firstChar.toUpperCase())
    .replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
}

const pathArray = [...currentPost.id.split("/").slice(0, -1).map(toPascalCase), currentPost.data.title];
---

<Layout title=`${nickname} - Posts` tab="posts">
  <div
    class="flex flex-col max-w-screen lg:flex-row mx-auto sm:min-h-[calc(100vh-169px)] min-h-[calc(100vh-125px)]
            border-t border-neutral-200 dark:border-neutral-800
            bg-white
            dark:bg-neutral-950
    "
    x-data="{ isOpen: false }"
  >
    <!-- 사이드바 -->
    <div>
      <div
        id="post-nav"
        class="lg:hidden w-full flex h-14 items-center border-b border-gray-950/5 px-4 sm:px-6 dark:border-white/10 text-neutral-400 bg-white dark:bg-neutral-950">
        <button
          @click="isOpen = !isOpen"
          class="p-2 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-700"
        >
          <svg
            class="w-4 h-4 text-black dark:text-white"
            fill="none"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path d="M4 8h16M4 16h16"></path>
          </svg>
        </button>
        <div class="ml-4 flex min-w-0 items-center gap-2 text-sm/6 whitespace-nowrap">
          {pathArray.map((dir, index) => (
            <span class="flex items-center gap-2">
              {index === pathArray.length - 1 ? <span class="text-black dark:text-white">{dir}</span> :
                <span>{dir}</span>}
              {index < pathArray.length - 1 && (
                <svg viewBox="0 0 16 16"
                     class={`size-4 ${index === pathArray.length - 2 && "text-black dark:text-white"}`}>
                  <path fill-rule="evenodd" fill="currentColor"
                        d="M6.22 4.22a.75.75 0 0 1 1.06 0l3.25 3.25a.75.75 0 0 1 0 1.06l-3.25 3.25a.75.75 0 0 1-1.06-1.06L8.94 8 6.22 5.28a.75.75 0 0 1 0-1.06Z"
                        clip-rule="evenodd"></path>
                </svg>
              )}
            </span>
          ))}
        </div>
      </div>

      <aside
        id="post-mobile-side"
        style="display: none;"
        x-show="isOpen"
        x-init="window.addEventListener('resize', () => {isOpen = isOpen && window.innerWidth < 1024;})"
        class="flex flex-col basis-full grow-0 shrink-0 w-full sm:w-1/2 fixed bg-white dark:bg-neutral-950"
      >
        <div
          @click="isOpen = !isOpen"
          x-show="isOpen"
          class="fixed inset-x-0 h-screen bg-white/70 dark:bg-neutral-900/70"
        ></div>
        <nav
          class="border-r bg-white dark:bg-neutral-950 p-2 lg:pb-20 overflow-y-auto h-screen lg:top-16 lg:h-[calc(100vh_-_4rem)] z-[1]"
        >
          <ul class="flex flex-col gap-y-0.5 p-6 ml-2">
            <li
              class={`transition-[background-color] flex flex-col p-1.5 pl-0 rounded-md ${currentPost.id === indexPost.id ? "text-[#F97316] dark:text-[#E34D0A] hover:bg-[#F97316]/30 dark:hover:bg-[#E34D0A]/30" : "hover:bg-neutral-100 dark:hover:bg-neutral-700"}`}
            >
              <a
                href={`/posts/${indexPost.id}`}
                class="pl-2.5 text-sm"
              >
                {indexPost.data.title}
              </a>
            </li>
            <FolderStructure items={structuredData} currentPostId={currentPost.id}/>
          </ul>
        </nav>
      </aside>

      <aside
        class="h-full hidden lg:flex flex-col basis-full lg:basis-72 grow-0 shrink-0 w-[18rem]"
      >
        <nav
          class="p-2 lg:pb-20 overflow-y-auto relative lg:sticky top-0 h-screen lg:top-16 lg:h-[calc(100vh_-_4rem)] z-[1]"
        >
          <ul class="flex flex-col gap-y-0.5 p-6 ml-2">
            <li
              class={`transition-[background-color] flex flex-col p-1.5 pl-0 rounded-md ${currentPost.id === indexPost.id ? "text-[#F97316] dark:text-[#E34D0A] hover:bg-[#F97316]/30 dark:hover:bg-[#E34D0A]/30" : "hover:bg-neutral-100 dark:hover:bg-neutral-700"}`}
            >
              <a
                href={`/posts/${indexPost.id}`}
                class="pl-2.5 text-sm"
              >
                {indexPost.data.title}
              </a>
            </li>
            <FolderStructure items={structuredData} currentPostId={currentPost.id}/>
          </ul>
        </nav>
      </aside>
    </div>

    <Separator/>

    <!-- 메인 콘텐츠 -->
    <main id="post-content" class="flex-1 flex justify-center items-start">
      {
        currentPost && (
          <article class="prose dark:prose-invert w-full lg:max-w-[42rem] p-6 lg:p-10 flex-1">
            <div class="font-bold text-2xl">{currentPost.data.title}</div>
            {Content &&
              <Content/>}
          </article>
          <div class="max-w-[18rem] max-h-full hidden xl:flex flex-1 flex-col sticky top-[56px] ml-4 pt-10">
            <TableOfContents headings={headings}/>
          </div>
        )
      }
    </main>

    <Separator/>

  </div>
</Layout>
