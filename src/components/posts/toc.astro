---
interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const {headings} = Astro.props;

const getIndentClass = (depth: number) => {
  const base = "hover:text-[#F97316] dark:hover:text-[#E34D0A] transition-colors duration-200 relative flex items-center";
  switch (depth) {
    case 2:
      return `${base} ml-2`;
    case 3:
      return `${base} ml-4`;
    case 4:
      return `${base} ml-6`;
    default:
      return base;
  }
};
---

<nav>
  <p
    class="mb-3 font-bold text-sm flex items-center text-[var(--secondary-text-color)] dark:text-[var(--secondary-text-color-dark)]">
    목차
  </p>
  <ul class="space-y-2.5 text-sm">
    {
      headings.map((heading) => (
        <li>
          <a
            href={`#${heading.slug}`}
            data-heading-link
            class={`block text-neutral-500/90 dark:text-neutral-400/90 ${getIndentClass(heading.depth)} before:min-w-2 before:min-h-2 before:rounded-full before:mr-2 before:scale-0 before:transition-transform before:duration-200 before:bg-[#F97316] dark:before:bg-[#E34D0A]`}
          >
            {heading.text}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<script>
  let currentActiveLink: Element | null = null;
  let isManualScroll = false;

  const headingElements = Array.from(document.querySelectorAll('article h2, article h3, article h4'));
  const tocLinks = document.querySelectorAll('[data-heading-link]');

  const removeActiveStyles = () => {
    if (currentActiveLink) {
      currentActiveLink.classList.remove('!text-[#F97316]', '!dark:text-[#E34D0A]', 'font-bold');
      currentActiveLink.classList.remove('before:!scale-100');
    }
  };

  const setActiveLink = (link: Element) => {
    removeActiveStyles();
    link.classList.add('!text-[#F97316]', '!dark:text-[#E34D0A]', 'font-bold');
    link.classList.add('before:!scale-100');
    currentActiveLink = link;
  };

  const updateActiveSection = () => {
    if (isManualScroll) return;

    const headerHeight = 56; // 헤더 높이
    const scrollTop = window.scrollY;
    const viewportTop = scrollTop + headerHeight; // 헤더 아래부터가 실제 보이는 영역의 시작점

    let currentSection = null;
    let prevSection = null;

    for (const heading of headingElements) {
      const rect = heading.getBoundingClientRect();
      const elemTop = rect.top + scrollTop;

      // 화면에 보이는 첫 번째 헤더를 찾습니다
      if (elemTop > viewportTop) {
        // 이전 섹션이 있다면 그것이 현재 활성화될 섹션
        currentSection = prevSection || heading;
        break;
      }
      prevSection = heading;
    }

    // 모든 헤더가 viewport 위에 있는 경우 마지막 헤더를 선택
    if (!currentSection && prevSection) {
      currentSection = prevSection;
    }

    // 페이지 최상단에서는 첫 번째 헤더를 선택
    if (!currentSection && scrollTop < headerHeight && headingElements.length > 0) {
      currentSection = headingElements[0];
    }

    if (currentSection) {
      const id = currentSection.getAttribute('id');
      const correspondingLink = document.querySelector(`a[href="#${id}"]`);
      if (correspondingLink && correspondingLink !== currentActiveLink) {
        setActiveLink(correspondingLink);
      }
    }
  };

  let ticking = false;
  document.addEventListener('scroll', () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        updateActiveSection();
        ticking = false;
      });
      ticking = true;
    }
  });

  updateActiveSection();

  tocLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const href = link.getAttribute('href');
      if (href) {
        const targetElement = document.querySelector(href);
        if (targetElement) {
          isManualScroll = true;
          window.location.hash = href.substring(1);
          setActiveLink(link);

          // 약간의 지연 후 스크롤 감지 다시 활성화
          setTimeout(() => {
            isManualScroll = false;
          }, 100);
        }
      }
    });
  });
</script>