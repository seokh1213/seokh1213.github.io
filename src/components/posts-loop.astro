---
import {getCollection} from "astro:content";
const allPosts = await getCollection("post");

const {count, selectedTag, selectedCategory} = Astro.props;

function parseDate(dateStr: string) {
  const [month, day, year] = dateStr.split(" ");
  return new Date(`${month} ${parseInt(day)}, ${year}`);
}

// 카테고리 및 태그 필터링 적용
const filteredPosts = allPosts.filter((post) =>
  (post.data.published || import.meta.env.MODE === 'development') &&
  (!selectedTag || post.data.tags?.includes(selectedTag)) &&
  (!selectedCategory || post.data.category === selectedCategory)
);

const sortedPosts = filteredPosts
  .map((post) => ({
    ...post,
    date: parseDate(post.data.dateFormatted),
  }))
  .sort((a, b) => b.date.getTime() - a.date.getTime());

const postsLoop = sortedPosts.slice(0, count).map((post) => {
  return {
    ...(post.data || {}),
    link: `/post/${post.slug}`,
  };
});

const uniqueTags = [...new Set(allPosts.flatMap(post => post.data.tags || []))];
const uniqueCategories = [...new Set(allPosts.map(post => post.data.category).filter(Boolean))];
---

<div class="mb-5">
  {postsLoop.map((post) => (
    <div
      class="relative border border-transparent border-dashed cursor-pointer p-7 group rounded-2xl"
      onclick={`location.href = '${post.link}'`}
    >
      <div
        class="absolute inset-0 z-20 w-full h-full duration-300 ease-out bg-white border border-dashed dark:bg-neutral-950 rounded-2xl border-neutral-300 dark:border-neutral-600 group-hover:-translate-x-1 group-hover:-translate-y-1"
      />
      <div
        class="absolute inset-0 z-10 w-full h-full duration-300 ease-out border border-dashed rounded-2xl border-neutral-300 dark:border-neutral-600 group-hover:translate-x-1 group-hover:translate-y-1"
      />
      <div class="relative z-30 duration-300 ease-out group-hover:-translate-x-1 group-hover:-translate-y-1">
        <h2 class="flex items-center mb-3">
          <a
            href={post.link}
            class="text-base font-bold leading-tight tracking-tight sm:text-lg dark:text-neutral-100"
          >
            {post.title}
            {post.published === false && <span class="text-xs text-gray-600 dark:text-gray-300"> (작성 중)</span>}
          </a>
        </h2>
        <p class="text-sm text-neutral-600 dark:text-neutral-400">
          <span>{post.description}</span>
        </p>
        <div class="mt-2.5 text-xs font-medium text-neutral-800 dark:text-neutral-300">
          Posted on {post.dateFormatted}
        </div>

        {post.tags?.length > 0 && (
          <div class="mt-2 text-xs text-neutral-600 dark:text-neutral-400">
            Tags:{" "}
            {post.tags.map((tag) => (
              <span
                class="inline-block px-2 py-1 mr-1 bg-gray-100 dark:bg-gray-600 text-gray-700 dark:text-gray-200 rounded-full">
              #{tag}
            </span>
            ))}
          </div>
        )}
      </div>
    </div>
  ))}
</div>